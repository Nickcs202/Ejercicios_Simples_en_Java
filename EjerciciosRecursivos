
public class EjerciciosRecursividad {

    public static void main(String[]  a){
     
     //Prueba funcionalidades
     
      // imprimir(1);

      // imprimirTabla9(1);
      
      // System.out.println( mayor(0,ar,0));
       
      // System.out.println("Fibo (8) = "+fibo(8));

      // System.out.println("Conejos (2) = "+conejos(2));

      // System.out.println("Conejos2 (2) = "+conejos2(2));

      // System.out.println("factorial(3) = "+factoria(3));


    }



/*
Ejercicio 1:
Realizar un procedimiento que imprima de manera recursiva los números del 1 al 10.
*/

    public  static void imprimir(int n){
        System.out.println(n);
        if(n==10)
            return;

        imprimir(n+1);
    }
    
/*
Ejercicio N 2
Realizar un procedimiento que imprima de manera recursiva la tabla del 9.
*/
    
    public  static void imprimirTabla9(int n){

        System.out.println(" 9 x "+n+" = "+(9*n));
        if(n==10)
            return;

        imprimirTabla9(n+1);
    }

/*
Ejercicio N 3
Realizar un procedimiento que encuentre el número mayor de un vector de n números enteros de
manera recursiva. 
*/
  
    public static int mayor(int n, int[] ar,int r ){
       // int r = 0;
      //  System.out.println(ar[n]);
        if(n == ar.length-1)
            return r;
           // return  ar[n];

        if(ar[n]>r) {
         r =ar[n];
            //return ar[n];
        }

        return mayor((n+1), ar,r);
    }
    
/*  
Ejercicio N 4
La secuencia fibonacci posee una definición recursiva en donde los dos primeros valores de la secuencia son 0 
y 1 (esencialmente 2 casos base) y  cada valor posterior es la suma de los dos valores anteriores, por lo que 
toda la secuencia es: 0, 1, 1, 2, 3, 5, 8, 13, 21 y  así sucesivamente.
Se solicita definir un método de fibonacci recursivo (n) que devuelve el número fibonacci n-ésimo, con n
= 0  representando el inicio de la secuencia. Ej:
fibonacci(0) = 0
fibonacci(1) = 1
fibonacci(2) = 1
*/
  
    public static int fibo(int n){

        if(n==0){
            return 0;
        }else
            if(n<=2){
                return 1;
            }

         return fibo(n-1)+fibo(n-2);
    }

/*
Ejercicio N 5
Tenemos un número de conejitos y cada conejito tiene dos grandes orejas. Se quiere calcular el número
total de orejas en todos los conejos recursivamente (sin bucles o multiplicación) Escriba una función
recursiva para obtener dicho total. Ej:
conejo(0) = 0
conejo(1) = 2
conejo(2) = 4
*/
 
    public static int conejos(int n){

        if (n==0)
            return 0;

        return 2 + conejos(n-1);
    }

/*
Ejercicio N 6
Tenemos conejitos de pie en una línea, numerados 1, 2, ... Los conejitos en posiciones impares (1, 3, ..)
tienen las 2 orejas normales. Los conejos en las posiciones pares (2, 4, ..) diremos que tienen 3 orejas,
porque cada uno tiene un pie levantado. Escriba una función que devuelva recursivamente el número de
"orejas" en la línea de conejos 1, 2, ... n (sin bucles o  multiplicación).
conejo(0) = 0
conejo(0) = 2
*/

    public  static int conejos2(int n){

        if(n==0)
            return 0;

        if (n%2==0)
            return 3 + conejos2(n-1);

        return 2 + conejos2(n-1);
    }

/*
Ejercicio N 7
Dado un número entero N, obtener el factorial del mismo siguiendo el algoritmo n * (n-1) * (n-2) ... 1.
Escribir una función recursiva (sin bucles o  multiplicación).
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
*/
 
		public static int factorial(int n){
			if (n == 0)
				return 1;
			else
				return multi (n,factorial(n-1));
		}

		public static int multi(int n, int m){
			if (m < 1)
				return 0;

			return n + multi (n,m-1);
		}

}

    
